[{"path":"https://ytorres-cambas.github.io/danubeoccurR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://ytorres-cambas.github.io/danubeoccurR/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://ytorres-cambas.github.io/danubeoccurR/articles/danubeoccurR.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"danubeoccurR","text":"danubeoccurR package designed facilitate management, cleaning, analysis fish species occurrence data Danube River Basin. easy--use functions integration data sources Global Biodiversity Information Facility (GBIF), danubeoccurR allows researchers, conservationists, policymakers efficiently handle species occurrence data , visualize species distributions, conduct analyses aquatic biodiversity critical European river system.","code":""},{"path":[]},{"path":"https://ytorres-cambas.github.io/danubeoccurR/articles/danubeoccurR.html","id":"data-management","dir":"Articles","previous_headings":"Introduction > Key Features","what":"Data Management","title":"danubeoccurR","text":"Import clean fish species occurrence records variety sources, including GBIF partner databases.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/articles/danubeoccurR.html","id":"mapping","dir":"Articles","previous_headings":"Introduction > Key Features","what":"Mapping","title":"danubeoccurR","text":"Visualize species occurrences interactive maps, customizable layouts options analyzing geographic patterns biodiversity.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/articles/danubeoccurR.html","id":"metadata-handling","dir":"Articles","previous_headings":"Introduction > Key Features","what":"Metadata Handling","title":"danubeoccurR","text":"Automatically generate manage metadata files documentation data sources, methods, essential information.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/articles/danubeoccurR.html","id":"data-cleaning","dir":"Articles","previous_headings":"Introduction > Key Features","what":"Data Cleaning","title":"danubeoccurR","text":"Use built-functions detect correct errors data, inconsistent georeferencing missing information.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/articles/danubeoccurR.html","id":"conservation-insights","dir":"Articles","previous_headings":"Introduction > Key Features","what":"Conservation Insights","title":"danubeoccurR","text":"Leverage power clean, high-quality data inform conservation strategies, habitat suitability models, biodiversity assessments Danube River Basin.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/articles/danubeoccurR.html","id":"why-danubeoccurr","dir":"Articles","previous_headings":"Introduction","what":"Why danubeoccurR?","title":"danubeoccurR","text":"Danube River one Europe’s longest important rivers, home rich diversity aquatic species. However, ongoing environmental threats pollution, habitat loss, climate change impacting biodiversity river system. ability clean, manage, analyze occurrence data crucial monitoring changes developing effective conservation strategies. danubeoccurR package tailored meet specific needs researchers practitioners working Danube River Basin, offering robust tools manage large volumes biodiversity data collected region. Whether researcher analyzing species distributions, conservationist developing habitat suitability models, policymaker seeking data inform decisions, danubeoccurR provides tools need streamline workflow.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/articles/danubeoccurR.html","id":"getting-started","dir":"Articles","previous_headings":"Introduction","what":"Getting Started","title":"danubeoccurR","text":"begin using danubeoccurR package, install CRAN GitHub start importing managing occurrence data. package comes detailed documentation, including vignettes, examples, function references help get features.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/articles/danubeoccurR.html","id":"installation","dir":"Articles","previous_headings":"Introduction > Getting Started","what":"Installation","title":"danubeoccurR","text":"","code":"# Install from CRAN (when available) install.packages(\"danubeoccurR\")  # Install the development version from GitHub remotes::install_github(\"your_github/danubeoccurR\")"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/articles/danubeoccurR.html","id":"load-the-package","dir":"Articles","previous_headings":"Introduction > Getting Started","what":"Load the Package","title":"danubeoccurR","text":"","code":"library(danubeoccurR)"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/articles/danubeoccurR.html","id":"next-steps","dir":"Articles","previous_headings":"Introduction > Getting Started","what":"Next Steps","title":"danubeoccurR","text":"following sections, walk key functionalities danubeoccurR, including: Importing occurrence records various data sources. Cleaning processing data ensure accuracy. Visualizing species distributions across Danube River Basin. Generating metadata document data analysis steps. end article, solid understanding use danubeoccurR manage analyze Danube fish species occurrence data, enabling contribute ongoing conservation efforts important freshwater ecosystem.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/articles/download-and-clean-gbif.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"General workflow to collate, format, data enrichment and check","text":"vignette demonstrates use functions danubeoccurR package download clean fish species occurrence records Global Biodiversity Information Facility (GBIF) Danube River Basin. covers steps filter, download, clean data prepare analysis. starting, ensure : active internet connection access GBIF data. GBIF API key. Additionally, ensure follow installation guideline package hydrographr operating system.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/articles/download-and-clean-gbif.html","id":"step-1-install-the-package-from-github","dir":"Articles","previous_headings":"","what":"Step 1: Install the Package from GitHub","title":"General workflow to collate, format, data enrichment and check","text":"get started, need install danubeoccurR, hydrographr specleanr packages GitHub. can using devtools package:","code":"# Install the devtools package if you haven't already install.packages(\"devtools\")  # Install the danubeoccurR package from GitHub devtools::install_github(\"ytorres-cambas/danubeoccurR\") devtools::install_github(\"glowabio/hydrographr\") devtools::install_github(\"AnthonyBasooma/specleanr\") library(danubeoccurR) library(hydrographr) library(specleanr) library(dplyr) library(sf)"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/articles/download-and-clean-gbif.html","id":"step-2-downloading-gbif-data","dir":"Articles","previous_headings":"","what":"Step 2: Downloading GBIF Data","title":"General workflow to collate, format, data enrichment and check","text":"installing package, can download fish species occurrences using download_gbif_records() function. fetch records fall within geographic boundary Danube River Basin. function retrieves fish species occurrences GBIF based species list polygon represents Danube River Basin. set import_to_r = TRUE import occurrences R. function returns list data frame occurrences data citation.","code":"# Define species to download. We will use only three species from a check list # of fish species form the Danube River Basin. The complete check list is data # set include with the package danubeoccurR species_list <- species_checklist[1:2] print(species_list) #> [1] \"Abramis brama\"    \"Acipenser baerii\" # Define a geographic bounding box to use for querying GBIF occurrences within # the specified area. The bounding box should be a simple feature (sf) object,  # typically imported into R with sf::read_sf(). # In this example, we use an sf object that is included in the danubeoccurR  # package, so there is no need to import it manually. bbox_danube_basin #> Simple feature collection with 1 feature and 1 field #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 8 ymin: 42 xmax: 30 ymax: 51 #> Geodetic CRS:  WGS 84 #>   gid                           geom #> 1   1 POLYGON ((8 51, 30 51, 30 4... # Convert the polygon to WKT format using the `get_wkt` function.  # This format is required for GBIF. The function takes an sf polygon object,  # ensures that the polygon has a counterclockwise winding order,  # and returns the WKT (Well-Known Text) representation of the polygon. wkt <- get_wkt(bbox_danube_basin) print(wkt) #> [1] \"POLYGON ((8 51, 8 42, 30 42, 30 51, 8 51))\" # Get the path to the temporary directory to save occurrences temp_path <- tempdir()   # Download occurrences from GBIF gbif_data <- download_gbif_records(species_names = species_list,                                    wkt = wkt,                                    output_occur_path = temp_path,                                    gbif_user = \"your_username\",                                    gbif_pwd = \"your_password\",                                    gbif_email=\"your_email@example.com\",                                    import_to_r = TRUE)"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/articles/download-and-clean-gbif.html","id":"step-3-cleaning-gbif-data","dir":"Articles","previous_headings":"","what":"Step 3: Cleaning GBIF Data","title":"General workflow to collate, format, data enrichment and check","text":"occurrences downloaded, clean data using clean_gbif(). function removes duplicates, invalid coordinates, quality issues. ensures data ready analysis, without missing erroneous records. can see, 2149 2453 records retained cleaning procedure.","code":"# Clean the downloaded GBIF records gbif_cleaned <- clean_gbif(gbif_data$raw_download,                                   coordinateUncertaintyInMeters = 1000,                                   coordinatePrecision = 0.01,                                   buffer_centroid_zoo_herbaria = 1000,                                   buffer_centroid_capitals = 1000,                                   buffer_centroid_countries = 1000) #> Testing country centroids: Removed 4 records. #> Testing country capitals: Removed 1 records. #> Testing biodiversity institutions: Removed 27 records. #> Testing missing year or species: Removed 271 records. #> Retained 2149 out of 2453 records after cleaning. # Number of records before cleaning nrow(gbif_data$raw_download) #> [1] 2453  # Number of records after cleaning nrow(gbif_cleaned) #> [1] 2149  # Preview the cleaned data head(gbif_cleaned) #> # A tibble: 6 × 50 #>      gbifID datasetKey      occurrenceID kingdom phylum class order family genus #>     <int64> <chr>           <chr>        <chr>   <chr>  <lgl> <chr> <chr>  <chr> #> 1 4.55e-315 6ac3f774-d9fb-… \"\"           Animal… Chord… NA    Cypr… Cypri… Abra… #> 2 4.55e-315 6ac3f774-d9fb-… \"\"           Animal… Chord… NA    Cypr… Cypri… Abra… #> 3 4.55e-315 6ac3f774-d9fb-… \"\"           Animal… Chord… NA    Cypr… Cypri… Abra… #> 4 4.55e-315 6ac3f774-d9fb-… \"\"           Animal… Chord… NA    Cypr… Cypri… Abra… #> 5 4.55e-315 6ac3f774-d9fb-… \"\"           Animal… Chord… NA    Cypr… Cypri… Abra… #> 6 4.55e-315 6ac3f774-d9fb-… \"\"           Animal… Chord… NA    Cypr… Cypri… Abra… #> # ℹ 41 more variables: species <chr>, infraspecificEpithet <chr>, #> #   taxonRank <chr>, scientificName <chr>, verbatimScientificName <chr>, #> #   verbatimScientificNameAuthorship <chr>, countryCode <chr>, locality <chr>, #> #   stateProvince <chr>, occurrenceStatus <chr>, individualCount <int>, #> #   publishingOrgKey <chr>, decimalLatitude <dbl>, decimalLongitude <dbl>, #> #   coordinateUncertaintyInMeters <dbl>, coordinatePrecision <dbl>, #> #   elevation <dbl>, elevationAccuracy <dbl>, depth <lgl>, …"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/articles/download-and-clean-gbif.html","id":"step-4-visualizing-the-occurrences","dir":"Articles","previous_headings":"","what":"Step 4: Visualizing the Occurrences","title":"General workflow to collate, format, data enrichment and check","text":"can now visualize occurrences map using visualize_points(). shown, occurrence records fall outside Danube River Basin. happens used bounding box spatial reference querying GBIF. limit data strictly Danube River Basin, can apply spatial filtering using get_spatial_subset() function. function filters points based layer representing Danube River Basin, included one datasets danubeoccurR package. Now, map displays occurrence records strictly located within Danube River Basin.","code":"visualize_points(points_df = gbif_cleaned,                  layer = danube_basin) # Spatial filtering of occurrence records gbif_filtered <- get_spatial_subset(danube_basin,                                     gbif_cleaned,                                     \"decimalLatitude\",                                     \"decimalLongitude\",                                      verbose = TRUE) visualize_points(points_df = gbif_filtered,                  layer = danube_basin)"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/articles/download-and-clean-gbif.html","id":"step-6-checking-species-names","dir":"Articles","previous_headings":"","what":"Step 6: Checking species names","title":"General workflow to collate, format, data enrichment and check","text":"clean species names ensure consistency FishBase, use check_names() function package specleanr. function matches species names FishBase , default, returns accepted name synonym provided. function also checks spelling errors suggests closest match FishBase based similarity threshold defined pct parameter. use default pct value 90 indicates match 90% required. can see, species names species column, correspond species names dataset, match names speciescheck column FishBase, indicating changes required.","code":"# Check species names for inconsistencies  gbif_name_checked <- check_names(data = gbif_filtered,                                  colsp = \"species\",                                  verbose = FALSE,                                  pct = 90,                                  merge = F,                                  sn = FALSE)  # Preview the species names print(gbif_name_checked)"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/articles/download-and-clean-gbif.html","id":"step-7-add-additional-taxonomic-information","dir":"Articles","previous_headings":"","what":"Step 7: Add additional taxonomic information","title":"General workflow to collate, format, data enrichment and check","text":"taxonomic information Genus, Family, Order missing occurrences, can retrieved FishBase added. example dataset missing taxonomic information, classification differs used FishBase. Therefore, update taxonomic classification example dataset based information retrieved FishBase. use species name list obtained previous step verifying species names FishBase. result data frame containing columns Species, Genus, Family, Order. case, species Abramis brama classified Family Leuciscidae; however, classified Cyprinidae example dataset downloaded GBIF. now proceed update Family classification Abramis brama.","code":"# Return genus, family and order of the species in the input vector.  tax_info <- get_taxonomy_info(species = gbif_name_checked$speciescheck, sources = \"fishbase\")  # Visualize result print(tax_info)  # Visualize taxonomic classification used in the example dataset. gbif_filtered %>%   select(species, genus, family, order) %>%   distinct(species, .keep_all = TRUE) %>%   print() # Update taxonomic information gbif_filtered[gbif_filtered$family==\"Cyprinidae\", \"family\"] <- \"Leuciscidae\""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/articles/download-and-clean-gbif.html","id":"step-8-add-administrative-information","dir":"Articles","previous_headings":"","what":"Step 8: Add administrative information","title":"General workflow to collate, format, data enrichment and check","text":"Administrative information, country name lower administrative levels (e.g., administrative levels 1 2 Database Global Administrative Areas), can added performing spatial join points GADM Administrative Boundaries using spatial_join_gadm() function. vector layer supplied ISO3 country code provided, function attempts download GPKG files GADM use spatial join. download fails due slow connection, timeout argument value can increased allow time process. final step, columns renamed align Darwin Core standards. case, GADM administrative levels 1 2 correspond Darwin Core terms stateProvince county, respectively. Therefore, rename columns accordingly.","code":"# Perform a spatial join of points with GADM Administrative Boundaries    admin_4_gbif <-  spatial_join_gadm(   coords_df = gbif_filtered,   country_codes = c(\"ALB\", \"AUT\", \"BIH\", \"BGR\", \"CHE\", \"CZE\", \"DEU\", \"HUN\",\"ITA\", \"HRV\",                       \"MDA\", \"MKD\",\"MNE\", \"POL\", \"ROU\", \"SRB\", \"SVK\", \"SVN\", \"UKR\", \"XKO\"),   lat_col = \"decimalLatitude\",   lon_col = \"decimalLongitude\",   timeout = 1000) # Rename columns admin_4_gbif <- admin_4_gbif %>%     select(-stateProvince) %>% # delete original column     rename(country = COUNTRY,            county = NAME_2,            stateProvince = NAME_1)"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/articles/download-and-clean-gbif.html","id":"step-9-extracting-sub-catchment-ids","dir":"Articles","previous_headings":"","what":"Step 9: Extracting sub-catchment ids","title":"General workflow to collate, format, data enrichment and check","text":"Next, extract IDs sub-catchments occurrence located add new column IDs dataset. achieve , use extract_ids() function hydrographr package. sub-catchment layer generated Hydrography90m dataset downloading tiles corresponding Danube River Basin cropping using functions hydrographr package. Lets first download, crop merge raster tiles sub-catchments. Now, ready extract sub-catchment IDs.","code":"# Folder to save final Hydrography90m layers # Create output folder if it doesn't exist output_hydro90m <- paste0(getwd(), \"/hydrography90m\") if(!dir.exists(output_hydro90m)) dir.create(output_hydro90m)  # Folder to save temporal files temp <-  paste0(getwd(), \"/temp\") if(!dir.exists(temp)) dir.create(temp)  # Define tile ID id <- c(\"h18v02\", \"h18v04\", \"h20v02\", \"h20v04\")  # Define raster variable r_var <- c(\"sub_catchment\")  # raster files download_tiles(variable = r_var,                file_format = \"tif\",                tile_id = id,                download_dir = temp)   # Get the full paths of the raster tiles raster_dir <- list.files(paste0(temp, \"/r.watershed\"), pattern = \".tif\",                          full.names = TRUE, recursive = TRUE)  # Crop raster tiles to the extent of a sf object for(itile in raster_dir) {    crop_to_extent(raster_layer = itile,                  bounding_box = bbox_danube_basin,                  out_dir = temp,                  file_name =  paste0(str_remove(basename(itile), \".tif\"),                                      \"_tmp.tif\"))  }  # Merge filtered raster tiles and save result to a directory merge_tiles(tile_dir = temp,             tile_names = list.files(temp,                                     full.names = FALSE,                                     pattern = \"_tmp.tif\"),             out_dir = output_hydro90m,             file_name = \"subcatch_danube.tif\",             name = \"ID\",             read = FALSE,             compression = \"high\",             quiet = FALSE) # Create unique ids for rows in gbif_filtered. It is required by the function # extract_ids. It will be removed later admin_4_gbif$id_col <- seq(1:nrow(admin_4_gbif))  # Extract sub-catchment IDs  ids_df <- extract_ids(     data = admin_4_gbif,     lon = \"decimalLongitude\",     lat = \"decimalLatitude\",     id = \"id_col\",     basin_layer = NULL,     subc_layer = paste0(getwd(), \"/hydrography90m/subcatch_danube.tif\"),     quiet = FALSE   )   # Check all occurrences have sub-catchment IDs if(length(which(is.na(ids_df$subcatchment_id))) == 0) {   print(\"All occurrences have sub-catchment IDs.\") } else {   print(paste0(length(which(is.na(ids_df$subcatchment_id))),                \" occurrences are missing sub-catchment IDs.\")) }  # New column with sub-catchment IDs gbif_subcID <- admin_4_gbif %>%   mutate(subcatchmentID = ids_df$subcatchment_id) %>%   select(-id_col) # delete column with row ids"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/articles/download-and-clean-gbif.html","id":"step-10-add-occurrence-ids","dir":"Articles","previous_headings":"","what":"Step 10: Add occurrence IDs","title":"General workflow to collate, format, data enrichment and check","text":"ensure record unique persistent identifier, assigned Universal Unique Identifiers (UUIDs) using generate_global_identifier() function. aligns Darwin Core standards facilitates data integration across biodiversity databases. First, identified records lacked occurrenceID. records, generated assigned UUID using generate_global_identifier() function. step ensures occurrences globally unique identifier, improving traceability interoperability datasets.","code":"# Identify records that lack an occurrenceID indx <- which(gbif_subcID$occurrenceID==\"\")  # Generate occurrence IDs ids <- generate_global_identifier(n = length(indx))  # Add ids gbif_subcID[indx,\"occurrenceID\"] <- ids"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/articles/download-and-clean-gbif.html","id":"step-11-check-data-format-and-completeness","dir":"Articles","previous_headings":"","what":"Step 11 Check data format and completeness","title":"General workflow to collate, format, data enrichment and check","text":"ensure data consistency compliance Darwin Core standards, perform series format checks. Column names verified using check_column_name() function confirm conform Darwin Core terms well additional custom names. Year values checked missing entries validated numeric within acceptable range using check_year_column() function. function output list : ** missing_values: Indices missing values year column. ** invalid_years: Indices values fall outside valid year range. ** updated_df: data frame updated year values flag indicating Coordinate validation conducted using check_coordinates() function ensure latitude longitude values follow correct decimal degree format (WGS84). checks help maintain data quality facilitate seamless integration biodiversity databases. Finally, ensure data completeness verify record includes least species name, date, coordinates.","code":"# Check column name check_column_name(df_input = ,                   standard_terms = c(dwc_names, \"waterBodyType\", \"gbifID\", \"subcatchmentID\"),                                verbose = TRUE)  # Check for missing values, ensure that values are numeric and fall within a valid range. The result is a list with three elements that store \"missing_values\", gbif_year_checked <- check_year_column(df = gbif_det_outlier,                   col_year = \"year\",                   year_range = c(1800, 2024)) print(gbif_year_checked$missing_values)  print(gbif_year_checked$invalid_years)  # Check coordinates format and ensure they are numeric data type gbif_coord_checked <- check_coordinates(df = gbif_year_checked$updated_df,                                         lat_col = \"decimalLatitude\",                                         lon_col = \"decimalLongitude\",                                         convert_to_numeric = TRUE,                                         verbose = TRUE)  # Check data completeness"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/articles/download-and-clean-gbif.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"General workflow to collate, format, data enrichment and check","text":"vignette shows download clean fish species occurrence data GBIF Danube River Basin using danubeoccurR package. cleaned data can analyzed used conservation strategies. pipeline can also integrated broader biodiversity assessment workflows.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/articles/download-and-clean-gbif.html","id":"acknowledgements","dir":"Articles","previous_headings":"","what":"Acknowledgements","title":"General workflow to collate, format, data enrichment and check","text":"Funding provided DANUBE4all project, funded European Union’s Horizon Europe research innovation programme grant agreement . 101093985.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/articles/manually-snap-points.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Manually snap species occurrence points","text":"Georeferencing errors common issue biodiversity datasets, potentially affecting ecological analyses conservation decisions. danubeocurR package provides interactive tool manually correct occurrence records incorrect spatial coordinates. vignette demonstrates launch use interactive application adjust occurrence points, ensuring accurate spatial representation. using tool, users can visually inspect move points correct locations map, improving quality reliability occurrence data. functionality particularly useful dealing historical records, ambiguous locality descriptions, systematic errors coordinate assignment. following sections, walk steps launch application, load occurrence data, manually correct erroneous points saving updated dataset.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/articles/manually-snap-points.html","id":"step-1-install-the-package-from-github","dir":"Articles","previous_headings":"","what":"Step 1: Install the Package from GitHub","title":"Manually snap species occurrence points","text":"get started, need install danubeoccurR package GitHub. can using devtools package:","code":"# Install the devtools package if you haven't already install.packages(\"devtools\")  # Install the danubeoccurR package from GitHub devtools::install_github(\"ytorres-cambas/danubeoccurR\") library(danubeoccurR) library(dplyr)"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/articles/manually-snap-points.html","id":"step-2-prepare-a-dataframe-with-coordinates","dir":"Articles","previous_headings":"","what":"Step 2: Prepare a dataframe with coordinates","title":"Manually snap species occurrence points","text":"step, create dataframe containing point coordinates need corrected. dataframe includes unique IDs latitude/longitude values two locations, Vienna Belgrade. snap_points_on_map() function used align points correct locations map.","code":"coords <- data.frame(id = 1:2,                       lat = c(48.2082, 44.8176),   # Vienna, Belgrade                      lng = c(16.3738, 20.4633))    # Vienna, Belgrade  updated_coords <- snap_points_on_map(coords)"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/articles/manually-snap-points.html","id":"step-3-launch-the-app-and-snap-points-manually","dir":"Articles","previous_headings":"","what":"Step 3: Launch the app and snap points manually","title":"Manually snap species occurrence points","text":"manually adjust coordinates, use Shiny app enables interactive point correction. app allows users drag drop points desired locations map. adjustments made, clicking ‘Done’ button saves updated coordinates. screenshot app interface, points can manually moved correct positions:","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/articles/manually-snap-points.html","id":"step-4-visualize-dataframe-with-original-and-updated-coordinates","dir":"Articles","previous_headings":"","what":"Step 4: Visualize dataframe with original and updated coordinates","title":"Manually snap species occurrence points","text":"adjusting points Shiny app, modified coordinates stored updated_coords dataframe. dataframe contains additional columns, new_lat new_lng, represent corrected latitude longitude values. ensures points properly aligned intended locations, improving data accuracy downstream analyses.","code":"# Display dataframe with original and updated coordinates print(updated_coords)"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Yusdiel Torres-Cambas. Author, maintainer.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Torres-Cambas Y (2025). danubeoccurR: Tools Downloading, Cleaning, Managing Fish Occurrence Records Danube River Basin. R package version 0.1.0, https://ytorres-cambas.github.io/danubeoccurR/.","code":"@Manual{,   title = {danubeoccurR: Tools for Downloading, Cleaning, and Managing Fish Occurrence Records for the Danube River Basin},   author = {Yusdiel Torres-Cambas},   year = {2025},   note = {R package version 0.1.0},   url = {https://ytorres-cambas.github.io/danubeoccurR/}, }"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/index.html","id":"danubeoccurr-","dir":"","previous_headings":"","what":"Tools for Downloading, Cleaning, and Managing Fish Occurrence Records for the Danube River Basin","title":"Tools for Downloading, Cleaning, and Managing Fish Occurrence Records for the Danube River Basin","text":"R package provides set tools download, clean, standardize species occurrence records, focus fish species Danube River Basin. primarily designed Danube fish data, package can applied species occurrence data broadly. includes functions experienced R users less coding experience, offering user-friendly interfaces interactive features via Shiny apps, making accessible wider audience.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for Downloading, Cleaning, and Managing Fish Occurrence Records for the Danube River Basin","text":"can install development version danubeoccurR GitHub using remotes package. First, ensure remotes installed:","code":"install.packages(\"remotes\")  remotes::install_github(\"ytorres-cambas/danubeoccurR\")"},{"path":[]},{"path":"https://ytorres-cambas.github.io/danubeoccurR/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Tools for Downloading, Cleaning, and Managing Fish Occurrence Records for the Danube River Basin","text":"example snap points map using snap_points_on_map() function. First, prepare data frame containing coordinates (latitude longitude) points ’d like snap. example, two locations: Vienna Belgrade. snap_points_on_map() function return updated data frame snapped coordinates, adjusting original points valid locations based underlying map data.","code":"# Load your package library(danubeoccurR)  # Define coordinates for Vienna and Belgrade coords <- data.frame(   id = 1:2,   lat = c(48.2082, 44.8176),   # Vienna, Belgrade   lng = c(16.3738, 20.4633)    # Vienna, Belgrade )  # Snap the points to the nearest valid locations on the map updated_coords <- snap_points_on_map(coords)  # Print data frame with original and new coordinates print(updated_coords)"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"Tools for Downloading, Cleaning, and Managing Fish Occurrence Records for the Danube River Basin","text":"Funding provided European Union’s Horizon Europe research innovation programme project DANUBE4all (grant agreement . 101093985).","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/auto_import_utf8.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically import CSV or Excel files and convert character columns to UTF-8 — auto_import_utf8","title":"Automatically import CSV or Excel files and convert character columns to UTF-8 — auto_import_utf8","text":"function imports data either CSV Excel file, detects file encoding, converts character columns UTF-8. supports different delimiters CSV files allows specifying sheet Excel files. Additionally, function can handle header detection custom separators CSV files.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/auto_import_utf8.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically import CSV or Excel files and convert character columns to UTF-8 — auto_import_utf8","text":"","code":"auto_import_utf8(   file_path,   file_type = c(\"csv\", \"xlsx\"),   sheet = NULL,   header = TRUE,   sep = \",\" )"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/auto_import_utf8.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically import CSV or Excel files and convert character columns to UTF-8 — auto_import_utf8","text":"file_path string specifying path file import. file_type string specifying file type. Options \"csv\" \"xlsx\". Default \"csv\". sheet string integer specifying sheet read Excel file. Ignored file_type \"csv\". Default NULL, means first sheet read. header logical value indicating whether first row contains column names. Default TRUE. sep string specifying separator used separate columns CSV file. Ignored file_type \"xlsx\". Default \",\".","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/auto_import_utf8.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatically import CSV or Excel files and convert character columns to UTF-8 — auto_import_utf8","text":"data frame character columns converted UTF-8 encoding.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/auto_import_utf8.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Automatically import CSV or Excel files and convert character columns to UTF-8 — auto_import_utf8","text":"CSV files, function automatically detects file's encoding using stringi::stri_enc_detect() function reads data data.table::fread(). Excel files, function uses readxl::read_excel() read data. importing, character columns explicitly converted UTF-8 encoding ensure consistency. can specify whether first row contains column names (header) adjust separator (sep) CSV files. sheet parameter allows specify sheet read importing Excel files.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/auto_import_utf8.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automatically import CSV or Excel files and convert character columns to UTF-8 — auto_import_utf8","text":"","code":"if (FALSE) { # \\dontrun{ # Import a CSV file with UTF-8 encoding and custom separator df_csv <- auto_import_utf8(\"data/file.csv\", file_type = \"csv\", header = TRUE, sep = \";\")  # Import an Excel file, reading from the first sheet by default df_xlsx <- auto_import_utf8(\"data/file.xlsx\", file_type = \"xlsx\")  # Import an Excel file, specifying a sheet and no header df_xlsx_sheet <- auto_import_utf8(\"data/file.xlsx\", file_type = \"xlsx\", sheet = \"Sheet2\", header = FALSE) } # }"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/bbox_danube_basin.html","id":null,"dir":"Reference","previous_headings":"","what":"Polygon that includes the Danube River Basin — bbox_danube_basin","title":"Polygon that includes the Danube River Basin — bbox_danube_basin","text":"polygon Danube River Basin. Made QGIS.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/bbox_danube_basin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Polygon that includes the Danube River Basin — bbox_danube_basin","text":"","code":"bbox_danube_basin"},{"path":[]},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/bbox_danube_basin.html","id":"bbox-danube-basin","dir":"Reference","previous_headings":"","what":"bbox_danube_basin","title":"Polygon that includes the Danube River Basin — bbox_danube_basin","text":"simple feature collection 1 feature o fields Geometry type: MULTIPOLYGON Bounding box:  xmin: 8.1525 ymin: 42.08333 xmax: 29.73583 ymax: 50.245 Geodetic CRS:  WGS 84","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/bbox_danube_basin.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Polygon that includes the Danube River Basin — bbox_danube_basin","text":"QGIS","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/check_column_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Data Frame Column Names Against Darwin Core Standard Terms — check_column_names","title":"Check Data Frame Column Names Against Darwin Core Standard Terms — check_column_names","text":"function checks column names data frame (multiple data frames) part set standard terms Darwin Core. output columns follow standard names can merge data frames specified.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/check_column_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Data Frame Column Names Against Darwin Core Standard Terms — check_column_names","text":"","code":"check_column_names(   df_input,   standard_terms = dwc_names,   verbose = TRUE,   merge = FALSE )"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/check_column_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Data Frame Column Names Against Darwin Core Standard Terms — check_column_names","text":"df_input data frame list data frames check. standard_terms character vector containing standard column names (default dwc_names). verbose logical value indicating whether output columns match standard terms (default TRUE). merge logical value indicating whether merge data frames names (default FALSE).","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/check_column_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Data Frame Column Names Against Darwin Core Standard Terms — check_column_names","text":"merging enabled data frames column names, returns merged data frame. verbosity enabled, prints columns match standard terms.","code":""},{"path":[]},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/check_coordinates.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Coordinates for WGS84 and Decimal Degrees and Convert to Numeric — check_coordinates","title":"Check Coordinates for WGS84 and Decimal Degrees and Convert to Numeric — check_coordinates","text":"function checks coordinates data frame WGS84 format decimal degrees. ensures latitude values -90 90, longitude values -180 180. convert_to_numeric parameter TRUE, attempts convert non-numeric coordinates numeric using .numeric(). also prints detailed information verbose set TRUE, returns updated data frame numeric coordinates.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/check_coordinates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Coordinates for WGS84 and Decimal Degrees and Convert to Numeric — check_coordinates","text":"","code":"check_coordinates(   df,   lat_col,   lon_col,   convert_to_numeric = TRUE,   verbose = FALSE )"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/check_coordinates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Coordinates for WGS84 and Decimal Degrees and Convert to Numeric — check_coordinates","text":"df data frame containing coordinates. lat_col name column containing latitude values. lon_col name column containing longitude values. convert_to_numeric Logical. TRUE, attempts convert coordinates numeric. Default TRUE. verbose Logical. TRUE, prints detailed information invalid non-numeric coordinates. Default FALSE.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/check_coordinates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Coordinates for WGS84 and Decimal Degrees and Convert to Numeric — check_coordinates","text":"list containing: df: updated data frame latitude longitude numeric. invalid_latitudes: Indices latitude values range invalid. invalid_longitudes: Indices longitude values range invalid. non_numeric_latitudes: Indices non-numeric latitude values (). non_numeric_longitudes: Indices non-numeric longitude values (). rows_changed: Number rows changes attempting conversion numeric.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/check_coordinates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Coordinates for WGS84 and Decimal Degrees and Convert to Numeric — check_coordinates","text":"","code":"# A data frame with coordinates df <- data.frame(latitude = c(\"45.5\", \"91\", NA, \"invalid\", \"12.5\"),                  longitude = c(\"-123.5\", \"200\", \"text\", \"-100\", \"55\"))  # A list with results list_result <- check_coordinates(df,  \"latitude\",  \"longitude\",  convert_to_numeric = TRUE,  verbose = TRUE) #> ### Coordinate Validation Summary ### #> Non-numeric latitude values found at rows: 4 #> Non-numeric longitude values found at rows: 3 #> Invalid latitude values (out of -90 to 90 range) found at rows: 2 #> Invalid longitude values (out of -180 to 180 range) found at rows: 2 #> Rows with changes due to as.numeric conversion: 0"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/check_duplicates.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for Duplicate Records in a Data Frame — check_duplicates","title":"Check for Duplicate Records in a Data Frame — check_duplicates","text":"function checks duplicate records based latitude, longitude, sub-catchment ID, species name. date can provided single column representing year.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/check_duplicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for Duplicate Records in a Data Frame — check_duplicates","text":"","code":"check_duplicates(   data,   lat_col,   lon_col,   subcatchment_col,   species_col,   year_col,   delete_duplicates = TRUE,   verbose = FALSE )"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/check_duplicates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for Duplicate Records in a Data Frame — check_duplicates","text":"data data frame containing columns latitude, longitude, sub-catchment ID, species name. Additionally, must contain column year. lat_col name column representing latitude. lon_col name column representing longitude. subcatchment_col name column representing sub-catchment ID. species_col name column representing species name. year_col name column representing year (mandatory). delete_duplicates Logical. TRUE (default), one record kept group duplicates. FALSE, new column added flag duplicates. verbose Logical. TRUE, details duplicate records printed. Default FALSE.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/check_duplicates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for Duplicate Records in a Data Frame — check_duplicates","text":"Returns data frame either duplicates removed flagged, along summary number rows changes.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/check_duplicates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check for Duplicate Records in a Data Frame — check_duplicates","text":"Duplicates defined multiple entries species recorded location (coordinates sub-catchment ID) year.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/check_duplicates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for Duplicate Records in a Data Frame — check_duplicates","text":"","code":"data <- data.frame(   latitude = c(34.5, 34.5, 35.1, 35.1),   longitude = c(-118.1, -118.1, -118.5, -118.5),   subcatchment_id = c(101, 101, 102, 102),   year = c(2021, 2021, 2021, 2021),   species = c(\"Species A\", \"Species A\", \"Species B\", \"Species B\") ) result <- check_duplicates(data,                            \"latitude\",                            \"longitude\",                            \"subcatchment_id\",                            \"species\",                            year_col = \"year\",                            delete_duplicates = FALSE,                            verbose = TRUE) #> Number of duplicate records: 4 #> Duplicate records: #>   latitude longitude subcatchment_id year   species full_date duplicate_flag #> 1     34.5    -118.1             101 2021 Species A      2021           TRUE #> 2     34.5    -118.1             101 2021 Species A      2021           TRUE #> 3     35.1    -118.5             102 2021 Species B      2021           TRUE #> 4     35.1    -118.5             102 2021 Species B      2021           TRUE #> Duplicates flagged in the 'duplicate_flag' column. #> Number of rows with changes: 4 print(result) #>   latitude longitude subcatchment_id year   species duplicate_flag #> 1     34.5    -118.1             101 2021 Species A           TRUE #> 2     34.5    -118.1             101 2021 Species A           TRUE #> 3     35.1    -118.5             102 2021 Species B           TRUE #> 4     35.1    -118.5             102 2021 Species B           TRUE"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/check_species_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Species Names with Variable Accuracy and Manual Editing Option — check_species_name","title":"Check Species Names with Variable Accuracy and Manual Editing Option — check_species_name","text":"function checks validity species names data frame using check_names function specleanr package, allowing flexible matching accuracy synonym lookup. extends check_names enabling loops different matching accuracy levels required. Additionally, manual = TRUE, function launches Shiny app allow manual editing names automatic checking process complete.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/check_species_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Species Names with Variable Accuracy and Manual Editing Option — check_species_name","text":"","code":"check_species_name(   data,   col_species_name,   verbose = FALSE,   target_accuracy = 90,   accuracy_decrement = NULL,   synonym = FALSE,   manual = FALSE )"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/check_species_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Species Names with Variable Accuracy and Manual Editing Option — check_species_name","text":"data data frame containing species names. col_species_name character string specifying column data species names. verbose Logical, TRUE, additional information printed execution. target_accuracy Numeric, starting accuracy (percentage) species name matching. accuracy_decrement Numeric, optional. provided, function loop decreasing accuracy levels, decrementing value. synonym Logical, TRUE, synonym names considered checking species names. manual Logical, TRUE, name-checking process, function call Shiny app manual editing results.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/check_species_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Species Names with Variable Accuracy and Manual Editing Option — check_species_name","text":"accuracy_decrement NULL, function returns single data frame checked species names. accuracy_decrement provided, returns list data frames accuracy level. manual = TRUE, function return manually updated data frame Shiny app interaction.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/check_species_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Species Names with Variable Accuracy and Manual Editing Option — check_species_name","text":"","code":"if (FALSE) { # \\dontrun{   library(specleanr)   data <- data.frame(species = c(\"Salmo salar\", \"Oncorhynchus mykiss\"))   result <- check_species_name(data, col_species_name = \"species\", target_accuracy = 95) } # }"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/check_year_column.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Missing Values and Validity of Year Column — check_year_column","title":"Check Missing Values and Validity of Year Column — check_year_column","text":"function checks missing values specified column data frame contains years. also ensures values numeric fall within valid range. transform_numeric TRUE, function attempts convert non-numeric values numeric.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/check_year_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Missing Values and Validity of Year Column — check_year_column","text":"","code":"check_year_column(   df,   col_year,   year_range = c(1800, 2024),   transform_numeric = TRUE )"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/check_year_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Missing Values and Validity of Year Column — check_year_column","text":"df data frame containing data checked. col_year name column data frame contains year values. year_range numeric vector length 2 specifying valid range years (e.g., c(1900, 2024)). transform_numeric Logical. TRUE, attempts convert non-numeric year values numeric. Defaults TRUE.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/check_year_column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Missing Values and Validity of Year Column — check_year_column","text":"list containing: missing_values: Indices missing values year column. invalid_years: Indices values fall outside valid year range. updated_df: data frame updated year values flag indicating whether values transformed.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/check_year_column.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Missing Values and Validity of Year Column — check_year_column","text":"","code":"df <- data.frame(year = c(\"2001\", \"2005\", NA, \"two thousand and ten\", \"2018\", \"2050\")) result <- check_year_column(df, \"year\", year_range = c(1800, 2024)) #> Error in check_year_column(df, \"year\", year_range = c(1800, 2024)): The column could not be converted to numeric."},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/clean_gbif.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean GBIF Occurrence Records — clean_gbif","title":"Clean GBIF Occurrence Records — clean_gbif","text":"function cleans species occurrence records downloaded using download_gbif_records() function package. applies filters based coordinate precision, uncertainty, geographic buffers, removes records low precision uncertainty, excludes records near country, capital, zoo/herbaria centroids using methods CoordinateCleaner package, eliminates duplicates based longitude, latitude, speciesKey, datasetKey. Additionally, removes records contain species year information.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/clean_gbif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean GBIF Occurrence Records — clean_gbif","text":"","code":"clean_gbif(   df,   coordinatePrecision = NULL,   coordinateUncertaintyInMeters = NULL,   buffer_centroid_countries = NULL,   buffer_centroid_capitals = NULL,   buffer_centroid_zoo_herbaria = NULL,   decimalLongitude = \"decimalLongitude\",   decimalLatitude = \"decimalLatitude\",   speciesKey = \"speciesKey\",   datasetKey = \"datasetKey\",   year = \"year\",   species = \"species\",   duplicate = FALSE )"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/clean_gbif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean GBIF Occurrence Records — clean_gbif","text":"df data frame containing species occurrence records, typically downloaded using download_gbif_records() function package. coordinatePrecision Numeric. Remove records precision. coordinateUncertaintyInMeters Numeric. Remove records uncertainty specific common values (301, 3036, 999, 9999). buffer_centroid_countries Numeric. Buffer size removing records near country centroids. buffer_centroid_capitals Numeric. Buffer size removing records near capital centroids. buffer_centroid_zoo_herbaria Numeric. Buffer size removing records near zoo herbaria centroids. decimalLongitude String. Column name longitude. Default \"decimalLongitude\". decimalLatitude String. Column name latitude. Default \"decimalLatitude\". speciesKey String. Column name species key. Default \"speciesKey\". datasetKey String. Column name dataset key. Default \"datasetKey\". year String. Column name year occurrence. Default \"year\". species String. Column name species. Default \"species\". duplicate Logical. Default FALSE. Whether remove duplicates longitude, latitude, speciesKey, datasetKey.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/clean_gbif.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean GBIF Occurrence Records — clean_gbif","text":"cleaned data frame species occurrences.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/clean_gbif.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clean GBIF Occurrence Records — clean_gbif","text":"function uses following methods CoordinateCleaner package: cc_cen(): Removes records near country centroids. cc_cap(): Removes records near capital centroids. cc_inst(): Removes records near zoo herbaria centroids.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/clean_gbif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean GBIF Occurrence Records — clean_gbif","text":"","code":"# Example usage df <- download_gbif_records(...) #> Error: '...' used in an incorrect context cleaned_df <- clean_gbif(df, coordinatePrecision = 0.01,                          coordinateUncertaintyInMeters = 100,                          buffer_centroid_countries = 10,                          buffer_centroid_capitals = 10,                          buffer_centroid_zoo_herbaria = 10,                          decimalLongitude = \"decimalLongitude\",                          decimalLatitude = \"decimalLatitude\",                          speciesKey = \"speciesKey\",                          datasetKey = \"datasetKey\",                          year = \"year\",                          species = \"species\") #> Error in clean_gbif(df, coordinatePrecision = 0.01, coordinateUncertaintyInMeters = 100,     buffer_centroid_countries = 10, buffer_centroid_capitals = 10,     buffer_centroid_zoo_herbaria = 10, decimalLongitude = \"decimalLongitude\",     decimalLatitude = \"decimalLatitude\", speciesKey = \"speciesKey\",     datasetKey = \"datasetKey\", year = \"year\", species = \"species\"): Missing required columns: decimalLongitude, decimalLatitude, speciesKey, datasetKey, year, species"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/create_metadata_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Metadata File — create_metadata_file","title":"Create Metadata File — create_metadata_file","text":"function generates metadata file describing specified file stored folder.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/create_metadata_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Metadata File — create_metadata_file","text":"","code":"create_metadata_file(   file_path,   description,   author,   author_email = NULL,   creation_date = Sys.Date(),   source = NULL,   licence = NULL,   method = NULL,   repo = NULL,   doi = NULL,   notes = NULL,   metadata_folder = dirname(file_path) )"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/create_metadata_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Metadata File — create_metadata_file","text":"file_path Character. full path file metadata created. description Character. brief description file. author Character. name author creator file. author_email Character. email author creator file. creation_date Date. date file created (default current date). source Character. URL reference source data. licence Character. license dataset provided. Common licenses include: CC0 1.0 (Public Domain Dedication) - rights reserved, free use. CC 4.0 (Attribution) - Free use, attribution. CC -SA 4.0 (Attribution-ShareAlike) - Free use, attribution share-alike. ODbL (Open Database License) - Allows use, modification, sharing, derivatives must remain ODbL. CC -NC 4.0 (Attribution-NonCommercial) - Non-commercial use , attribution. CC -ND 4.0 (Attribution-NoDerivatives) - can share, modify dataset. GNU GPL - Allows reuse modification, derivatives must also GPL. MIT License - Permissive, allows reuse context attribution. Specify license provide link applicable (e.g., CC 4.0 (https://creativecommons.org/licenses//4.0/)). method Character. short description actions conducted obtain modify dataset (e.g., \"crop\", \"filter\") indication script used obtain modify dataset. repo Character. URL reference repository script used obtain modify dataset can found (e.g., GitHub, Zenodo). doi Character. Digital Object Identifier (DOI) dataset related publication, available. notes Character. additional notes file. metadata_folder Character. folder generated metadata file saved. specified, metadata file saved folder file. version Character. version file. provided, automatically assigned.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/create_metadata_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Metadata File — create_metadata_file","text":"metadata file saved specified metadata folder folder file metadata_folder provided.","code":""},{"path":[]},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/danube_basin.html","id":null,"dir":"Reference","previous_headings":"","what":"Danube River Basin — danube_basin","title":"Danube River Basin — danube_basin","text":"polygon Danube River Basin","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/danube_basin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Danube River Basin — danube_basin","text":"","code":"danube_basin"},{"path":[]},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/danube_basin.html","id":"danube-basin","dir":"Reference","previous_headings":"","what":"danube_basin","title":"Danube River Basin — danube_basin","text":"simple feature collection 1 feature o fields Geometry type: MULTIPOLYGON Bounding box:  xmin: 8.1525 ymin: 42.08333 xmax: 29.73583 ymax: 50.245 Geodetic CRS:  WGS 84","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/danube_basin.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Danube River Basin — danube_basin","text":"https://hydrography.org/","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/dms_to_decimal.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Degrees, Minutes, Seconds (DMS) to Decimal Degrees (DD) — dms_to_decimal","title":"Convert Degrees, Minutes, Seconds (DMS) to Decimal Degrees (DD) — dms_to_decimal","text":"function converts geographic coordinates Degrees, Minutes, Seconds (DMS) format Decimal Degrees (DD). input can either data frame separate columns degrees, minutes, seconds, single column DMS represented symbols (e.g., 34°30'45\"N).","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/dms_to_decimal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Degrees, Minutes, Seconds (DMS) to Decimal Degrees (DD) — dms_to_decimal","text":"","code":"dms_to_decimal(data, lat_col, lon_col, is_dms_symbol = TRUE, verbose = FALSE)"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/dms_to_decimal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Degrees, Minutes, Seconds (DMS) to Decimal Degrees (DD) — dms_to_decimal","text":"data data frame containing either separate columns degrees, minutes, seconds, single column DMS formatted values latitude longitude. lat_col name column representing latitude vector. can either single column DMS notation separate columns degrees. lon_col name column representing longitude. can either single column DMS notation separate columns degrees. is_dms_symbol TRUE (default), assumes latitude longitude columns DMS notation symbols (e.g., 34°30'45\"N). verbose Logical. TRUE, prints messages conversion process. Default FALSE.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/dms_to_decimal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Degrees, Minutes, Seconds (DMS) to Decimal Degrees (DD) — dms_to_decimal","text":"data frame two new columns: lat_dd latitude decimal degrees lon_dd longitude decimal degrees.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/dms_to_decimal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Degrees, Minutes, Seconds (DMS) to Decimal Degrees (DD) — dms_to_decimal","text":"","code":"# Example with DMS symbol notation data <- data.frame(   latitude = c(\"34°30'00\\\"N\", \"40°45'00\\\"N\"),   longitude = c(\"118°15'00\\\"W\", \"73°58'00\\\"W\") ) result <- dms_to_decimal(data, \"latitude\", \"longitude\", is_dms_symbol = TRUE) print(result) #>     latitude   longitude lat_dd     lon_dd #> 1 34°30'00\"N 118°15'00\"W  34.50 -118.25000 #> 2 40°45'00\"N  73°58'00\"W  40.75  -73.96667  # Example with separate columns data <- data.frame(   lat_deg = c(34, 40),   lat_min = c(30, 45),   lat_sec = c(0, 0),   lon_deg = c(118, 73),   lon_min = c(15, 58),   lon_sec = c(0, 0) ) result <- dms_to_decimal(data, \"lat_deg\", \"lon_deg\", is_dms_symbol = FALSE) #> Error in get(paste0(lat_col, \"_min\")): object 'lat_deg_min' not found print(result) #>     latitude   longitude lat_dd     lon_dd #> 1 34°30'00\"N 118°15'00\"W  34.50 -118.25000 #> 2 40°45'00\"N  73°58'00\"W  40.75  -73.96667"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/download_gbif_records.html","id":null,"dir":"Reference","previous_headings":"","what":"Download GBIF Records for Specified Species within a Polygon — download_gbif_records","title":"Download GBIF Records for Specified Species within a Polygon — download_gbif_records","text":"function downloads occurrence records GBIF given vector species names within specified polygon, provided WKT string. function sets GBIF credentials, checks taxon keys, handles synonyms, downloads records based polygon species names.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/download_gbif_records.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download GBIF Records for Specified Species within a Polygon — download_gbif_records","text":"","code":"download_gbif_records(   species_names,   wkt,   output_occur_path,   gbif_user,   gbif_pwd,   gbif_email,   import_to_r = TRUE )"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/download_gbif_records.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download GBIF Records for Specified Species within a Polygon — download_gbif_records","text":"species_names vector species names download records . wkt well-known text (WKT) representation polygon spatial filtering. output_occur_path path downloaded records saved. gbif_user GBIF username. gbif_pwd GBIF password. gbif_email GBIF email notifications. import_to_r logical value indicating whether import downloaded data R. Default TRUE.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/download_gbif_records.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download GBIF Records for Specified Species within a Polygon — download_gbif_records","text":"list containing downloaded occurrence records (import_to_r TRUE) citation GBIF download.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/download_gbif_records.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download GBIF Records for Specified Species within a Polygon — download_gbif_records","text":"function automatically filters records ensure occurrences geospatial issues missing coordinates excluded. Additionally, excludes fossil living specimens download.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/download_gbif_records.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download GBIF Records for Specified Species within a Polygon — download_gbif_records","text":"","code":"# Define the path to the polygon file included in the package polygon_path <- system.file(\"extdata\", \"danube_basin.gpkg\", package = \"yourPackageName\")  # Convert the polygon to WKT format using the `get_wkt` function from your package wkt <- get_wkt(bbox_danube_basin)  # Download occurrences for species of interest output_occur_path <- \"./downloaded_records\" gbif_data <- download_gbif_records(   species_names = c(\"Hucho hucho\", \"Alburnoides bipunctatus\", \"Chondrostoma nasus\"),   wkt = wkt,   output_occur_path = output_occur_path,   gbif_user = \"your_username\",   gbif_pwd = \"your_password\",   gbif_email = \"your_email@example.com\",   import_to_r = TRUE ) #> Error: 401 - Unauthorized  # Access the downloaded records occurrence_records <- gbif_data$raw_download  # Access the GBIF citation gbif_citation <- gbif_data$gbif_download_citation  # Create a metadata file for the downloaded records create_metadata_file(file_path = paste0(output_occur_path,\"file_name.zip\"), description = \"This file contains fish species occurrences from GBIF\", author = \"Your Name\", author_email = \"your_email@example.com\", source = gbif_citation) #> Error in create_metadata_file(file_path = paste0(output_occur_path, \"file_name.zip\"),     description = \"This file contains fish species occurrences from GBIF\",     author = \"Your Name\", author_email = \"your_email@example.com\",     source = gbif_citation): The specified file does not exist."},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/dwc_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Darwin Core Terms for Occurrence Datasets — dwc_names","title":"Darwin Core Terms for Occurrence Datasets — dwc_names","text":"vector contains column names conform Darwin Core Standard, commonly used occurrence datasets, particularly GBIF.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/dwc_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Darwin Core Terms for Occurrence Datasets — dwc_names","text":"","code":"dwc_names"},{"path":[]},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/dwc_names.html","id":"dwc-names","dir":"Reference","previous_headings":"","what":"dwc_names","title":"Darwin Core Terms for Occurrence Datasets — dwc_names","text":"character vector following terms: occurrenceID unique identifier occurrence record basisOfRecord type record (e.g., HumanObservation, MachineObservation) catalogNumber identifier record within dataset collection recordNumber number assigned collector record recordedBy list names people, groups, organizations responsible recording occurrence individualCount number individuals observed sex sex individuals represented occurrence lifeStage life stage individuals (e.g., adult, juvenile) establishmentMeans process organism became established location (e.g., native, introduced) occurrenceStatus status occurrence (e.g., present, absent) preparations list preparations (e.g., dry specimen, DNA extract) disposition current state specimen (e.g., collection, missing) associatedMedia URLs images, videos, sound recordings associatedOccurrences list occurrence records associated one associatedReferences list references associated occurrence associatedSequences list genetic sequences associated occurrence associatedTaxa list taxa associated occurrence eventID identifier event parentEventID identifier broader event associated one samplingProtocol method protocol used collect data samplingEffort amount effort expended event (e.g., time spent, area surveyed) eventDate date event eventTime time event startDayOfYear start event terms day year endDayOfYear end event terms day year year year event month month event day day event verbatimEventDate original event date string parsing locationID identifier location higherGeographyID identifier higher-level geography higherGeography string describing higher-level geography continent name continent waterBody name water body islandGroup name island group island name island country full name country countryCode ISO 3166-1 alpha-2 code country stateProvince name state province county name county similar subdivision municipality name municipality locality specific locality event verbatimLocality original locality string verbatimCoordinates original coordinates string verbatimLatitude latitude originally provided verbatimLongitude longitude originally provided verbatimCoordinateSystem coordinate system originally provided decimalLatitude latitude occurrence decimalLongitude longitude occurrence coordinateUncertaintyInMeters uncertainty coordinates, meters coordinatePrecision precision coordinates pointRadiusSpatialFit spatial fit radius around coordinates footprintWKT Well-Known Text (WKT) representation footprint footprintSRS Spatial Reference System footprint footprintSpatialFit spatial fit footprint georeferencedBy name person group georeferenced occurrence georeferencedDate date georeferencing performed georeferenceProtocol protocol used determine coordinates georeferenceSources sources used determine coordinates georeferenceVerificationStatus status georeference verification georeferenceRemarks additional information georeferencing process scientificName full scientific name including authorship acceptedNameUsage currently accepted name taxon taxonID identifier taxon acceptedTaxonID identifier currently accepted taxon parentNameUsageID identifier parent taxon scientificNameID identifier scientific name kingdom kingdom organism phylum phylum organism class class organism order order organism family family organism genus genus organism specificEpithet specific epithet organism infraspecificEpithet infraspecific epithet organism taxonRank taxonomic rank specific name scientificName verbatimTaxonRank rank originally provided scientificNameAuthorship authorship information scientificName vernacularName common name associated taxon nomenclaturalCode code governing scientific name taxonomicStatus status name (e.g., accepted, synonym) nomenclaturalStatus nomenclatural status (e.g., valid, invalid) identificationID identifier identification event identificationQualifier brief statement uncertainty identification typeStatus type status specimen (e.g., holotype, syntype) identifiedBy person identified organism dateIdentified date identification made identificationRemarks Remarks identification process datasetID identifier dataset datasetName name dataset institutionCode code identifying institution holds publishes data collectionCode code identifying collection data came ownerInstitutionCode code identifying institution owns data rightsHolder entity holds rights data license license data provided rights Information rights associated data accessRights Information can access data bibliographicCitation citation resource whole references URL identifier related resource publication","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/dwc_names.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Darwin Core Terms for Occurrence Datasets — dwc_names","text":"https://dwc.tdwg.org/terms/","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/extract_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Day, Month, and Year from Date Column — extract_date","title":"Extract Day, Month, and Year from Date Column — extract_date","text":"function takes column dates can various common formats, extracts day, month, year, returning data frame.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/extract_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Day, Month, and Year from Date Column — extract_date","text":"","code":"extract_date(date_col, date_format = \"dmy\")"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/extract_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Day, Month, and Year from Date Column — extract_date","text":"date_col character vector representing dates various formats. date_format Optional. character string specifying date format (\"dmy\" \"mdy\") resolve ambiguities.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/extract_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Day, Month, and Year from Date Column — extract_date","text":"data frame three columns: day, month, year.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/extract_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Day, Month, and Year from Date Column — extract_date","text":"","code":"# mdy format dates <- c(\"October 2, 2024\", \"10-02-2024\", \"10/02/2024\") result <- extract_date(dates, date_format = \"mdy\") print(result) #>   day month year #> 1   2    10 2024 #> 2   2    10 2024 #> 3   2    10 2024 dates <- c(\"2 October 2024\", \"02-10-2024\", \"02/10/2024\") result <- extract_date(dates, date_format = \"dmy\") print(result) #>   day month year #> 1   2    10 2024 #> 2   2    10 2024 #> 3   2    10 2024"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/extract_location_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Municipality, Province, and Country using Latitude and Longitude (OSM) — extract_location_info","title":"Extract Municipality, Province, and Country using Latitude and Longitude (OSM) — extract_location_info","text":"function takes latitude longitude values returns corresponding municipality, province, full country name (Darwin Core standard) using OpenStreetMap (OSM) reverse geocoding.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/extract_location_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Municipality, Province, and Country using Latitude and Longitude (OSM) — extract_location_info","text":"","code":"extract_location_info(data, latitude = \"latitude\", longitude = \"longitude\")"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/extract_location_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Municipality, Province, and Country using Latitude and Longitude (OSM) — extract_location_info","text":"data data frame containing latitude longitude columns. latitude Name column latitude data frame (string). Default \"latitude\". longitude Name column longitude data frame (string). Default \"longitude\".","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/extract_location_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Municipality, Province, and Country using Latitude and Longitude (OSM) — extract_location_info","text":"data frame additional columns municipality, province, country, preserving original rows.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/extract_location_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Municipality, Province, and Country using Latitude and Longitude (OSM) — extract_location_info","text":"","code":"if (FALSE) { # \\dontrun{ points <- data.frame(   decimalLatitude = c(48.2082, 44.7866, 48.2082),   decimalLongitude = c(16.3738, 20.4489, 16.3738) ) results <- extract_location_info(points, latitude = \"decimalLatitude\", longitude = \"decimalLongitude\") print(results) } # }"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/fish_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Fish species occurrence records from GBIF — fish_data","title":"Fish species occurrence records from GBIF — fish_data","text":"Occurrence records Hucho hucho, Alburnoides bipunctatus, Chondrostoma nasus downloaded GBIF.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/fish_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fish species occurrence records from GBIF — fish_data","text":"","code":"fish_data"},{"path":[]},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/fish_data.html","id":"fish-data","dir":"Reference","previous_headings":"","what":"fish_data","title":"Fish species occurrence records from GBIF — fish_data","text":"data frame 1685 rows 50 columns: gbifID Unique GBIF occurrence identifier. datasetKey UUID identifying dataset GBIF. occurrenceID identifier occurrence (often globally unique). kingdom kingdom organism belongs. phylum phylum classification organism. class class organism. order order organism. family family organism. genus genus organism. species species name organism. infraspecificEpithet infraspecific epithet, subspecies variety. taxonRank taxonomic rank organism. scientificName full scientific name including genus species. verbatimScientificName original scientific name recorded data. verbatimScientificNameAuthorship original authorship scientific name. countryCode ISO country code occurrence recorded. locality locality description occurrence recorded. stateProvince state province occurrence recorded. occurrenceStatus status occurrence (e.g., present, absent). individualCount number individuals recorded. publishingOrgKey UUID identifying organization published data. decimalLatitude latitude occurrence recorded, decimal degrees. decimalLongitude longitude occurrence recorded, decimal degrees. coordinateUncertaintyInMeters Uncertainty coordinates meters. coordinatePrecision Precision coordinates provided. elevation elevation occurrence recorded, meters. elevationAccuracy Accuracy elevation measurement, meters. depth depth occurrence recorded, meters. depthAccuracy Accuracy depth measurement, meters. eventDate date occurrence recorded. day day occurrence recorded. month month occurrence recorded. year year occurrence recorded. taxonKey GBIF taxonomic key taxon. speciesKey GBIF taxonomic key species. basisOfRecord basis record (e.g., HumanObservation, MachineObservation).","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/fish_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Fish species occurrence records from GBIF — fish_data","text":"https://www.gbif.org/","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/gbif_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Fish species occurrence records from GBIF — gbif_data","title":"Fish species occurrence records from GBIF — gbif_data","text":"Occurrence records Abramis brama Acipenser baerii downloaded GBIF. data provided list containing metadata raw occurrence records.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/gbif_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fish species occurrence records from GBIF — gbif_data","text":"","code":"gbif_data"},{"path":[]},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/gbif_data.html","id":"gbif-data","dir":"Reference","previous_headings":"","what":"gbif_data","title":"Fish species occurrence records from GBIF — gbif_data","text":"list length 2: gbif_download_citation character string containing information source, date, method used download occurrences GBIF. raw_download data frame 2,453 rows 50 columns, containing raw occurrence records. columns include: gbifID Unique GBIF occurrence identifier. datasetKey UUID identifying dataset GBIF. occurrenceID identifier occurrence (often globally unique). kingdom kingdom organism belongs. phylum phylum classification organism. class class organism. order order organism. family family organism. genus genus organism. species species name organism. infraspecificEpithet infraspecific epithet, subspecies variety. taxonRank taxonomic rank organism. scientificName full scientific name including genus species. verbatimScientificName original scientific name recorded data. verbatimScientificNameAuthorship original authorship scientific name. countryCode ISO country code occurrence recorded. locality locality description occurrence recorded. stateProvince state province occurrence recorded. occurrenceStatus status occurrence (e.g., present, absent). individualCount number individuals recorded. publishingOrgKey UUID identifying organization published data. decimalLatitude latitude occurrence recorded, decimal degrees. decimalLongitude longitude occurrence recorded, decimal degrees. coordinateUncertaintyInMeters Uncertainty coordinates meters. coordinatePrecision Precision coordinates provided. elevation elevation occurrence recorded, meters. elevationAccuracy Accuracy elevation measurement, meters. depth depth occurrence recorded, meters. depthAccuracy Accuracy depth measurement, meters. eventDate date occurrence recorded. day day occurrence recorded. month month occurrence recorded. year year occurrence recorded. taxonKey GBIF taxonomic key taxon. speciesKey GBIF taxonomic key species. basisOfRecord basis record (e.g., HumanObservation, MachineObservation).","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/gbif_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Fish species occurrence records from GBIF — gbif_data","text":"https://www.gbif.org/","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/generate_global_identifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Persistent Global Identifiers (UUID) — generate_global_identifier","title":"Generate Persistent Global Identifiers (UUID) — generate_global_identifier","text":"function generates persistent global identifier (UUID) record, can used unique identifier Darwin Core records data.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/generate_global_identifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Persistent Global Identifiers (UUID) — generate_global_identifier","text":"","code":"generate_global_identifier(n = 1, namespace = NULL)"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/generate_global_identifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Persistent Global Identifiers (UUID) — generate_global_identifier","text":"n Integer, number UUIDs generate. Default 1. namespace character string representing custom namespace. Default NULL.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/generate_global_identifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Persistent Global Identifiers (UUID) — generate_global_identifier","text":"vector UUIDs.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/generate_global_identifier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Persistent Global Identifiers (UUID) — generate_global_identifier","text":"","code":"# Generate a single UUID generate_global_identifier() #> [1] \"881afb8e-59b5-4860-8cb4-8eb4d3db7f30\"  # Generate 5 UUIDs generate_global_identifier(n = 5) #> [1] \"65a60a56-06c4-482a-8538-7ad1a44a68c6\" #> [2] \"e96bef0a-9468-44bc-97b1-b5af9d40b9bd\" #> [3] \"27dd16d9-f34b-48e5-bd1c-ed8d4ff6c068\" #> [4] \"9f22527e-6f94-4769-b97c-17595ff85ff0\" #> [5] \"5b92cab9-78a0-4406-89a2-8f2258328b1d\""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/get_spatial_subset.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Spatial Subset of Data — get_spatial_subset","title":"Get Spatial Subset of Data — get_spatial_subset","text":"Filters data frame spatial points include within specified polygon.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/get_spatial_subset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Spatial Subset of Data — get_spatial_subset","text":"","code":"get_spatial_subset(   polygon,   data,   lat_col,   lon_col,   crs = 4326,   verbose = FALSE )"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/get_spatial_subset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Spatial Subset of Data — get_spatial_subset","text":"polygon sf object representing polygon use filtering. data data frame containing spatial point data latitude longitude columns. lat_col character string specifying name latitude column data frame. lon_col character string specifying name longitude column data frame. crs integer specifying Coordinate Reference System (CRS) input points (default 4326). verbose logical value indicating whether display messages processing (default FALSE).","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/get_spatial_subset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Spatial Subset of Data — get_spatial_subset","text":"filtered data frame containing points within specified polygon.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/get_spatial_subset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Spatial Subset of Data — get_spatial_subset","text":"function converts data frame latitude longitude columns sf object, checks CRS consistency input polygon data, performs spatial filtering operation retain points fall within given polygon. CRS input polygon match CRS data, polygon transformed match data's CRS.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/get_spatial_subset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Spatial Subset of Data — get_spatial_subset","text":"","code":"if (FALSE) { # \\dontrun{ library(sf)  # Example polygon polygon <- st_as_sf(data.frame(   id = 1,   geometry = st_sfc(st_polygon(list(matrix(c(     -10, -10,     10, -10,     10, 10,     -10, 10,     -10, -10   ), ncol = 2, byrow = TRUE)))) ), crs = 4326)  # Example data frame data <- data.frame(   id = 1:5,   lat = c(0, 5, -15, 20, -5),   lon = c(0, 5, 15, -20, -5) )  # Subset points within the polygon filtered_data <- get_spatial_subset(polygon, data, lat_col = \"lat\", lon_col = \"lon\", verbose = TRUE) print(filtered_data) } # }"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/get_taxonomy_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Taxonomy Information Including Genus, Family and Order — get_taxonomy_info","title":"Get Taxonomy Information Including Genus, Family and Order — get_taxonomy_info","text":"function returns genus, family, order species input vector. queries multiple sources (e.g., GBIF, ITIS, FishBase, COL, NCBI) retrieve taxonomic information. all_categories set TRUE, return available taxonomic ranks.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/get_taxonomy_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Taxonomy Information Including Genus, Family and Order — get_taxonomy_info","text":"","code":"get_taxonomy_info(   species,   all_categories = FALSE,   sources = c(\"gbif\", \"itis\", \"ncbi\") )"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/get_taxonomy_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Taxonomy Information Including Genus, Family and Order — get_taxonomy_info","text":"species Vector species names (scientific names) input. all_categories Logical, TRUE, retrieves taxonomic categories available. Default FALSE. sources Character vector, taxonomy sources query. Options include \"gbif\", \"itis\", \"ncbi\", \"col\", \"eol\", \"tropicos\", \"wikidata\", \"ott\", \"nbnc\", \"fishbase\". Default c(\"gbif\", \"itis\", \"ncbi\").","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/get_taxonomy_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Taxonomy Information Including Genus, Family and Order — get_taxonomy_info","text":"data frame taxonomic categories including species, year, author, genus, family, order.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/get_taxonomy_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Taxonomy Information Including Genus, Family and Order — get_taxonomy_info","text":"","code":"if (FALSE) { # \\dontrun{ # Example with a single species using multiple sources get_taxonomy_info(c(\"Panthera leo\"), sources = c(\"gbif\", \"itis\"))  # Example with fish species using FishBase get_taxonomy_info(c(\"Salmo salar\", \"Oncorhynchus mykiss\"), sources = \"fishbase\")  # Example with multiple species and all categories get_taxonomy_info(c(\"Panthera leo\", \"Homo sapiens\"), all_categories = TRUE) } # }"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/get_wkt.html","id":null,"dir":"Reference","previous_headings":"","what":"Get WKT Representation of Polygon from sf Object in Counterclockwise Order — get_wkt","title":"Get WKT Representation of Polygon from sf Object in Counterclockwise Order — get_wkt","text":"function takes sf polygon object, ensures polygon counterclockwise winding order, returns WKT (Well-Known Text) representation polygon.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/get_wkt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get WKT Representation of Polygon from sf Object in Counterclockwise Order — get_wkt","text":"","code":"get_wkt(sf_obj)"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/get_wkt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get WKT Representation of Polygon from sf Object in Counterclockwise Order — get_wkt","text":"sf_obj sf object containing polygon geometry.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/get_wkt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get WKT Representation of Polygon from sf Object in Counterclockwise Order — get_wkt","text":"WKT string representing polygon counterclockwise winding order.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/get_wkt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get WKT Representation of Polygon from sf Object in Counterclockwise Order — get_wkt","text":"","code":"get_wkt(bbox_danube_basin) #> [1] \"POLYGON ((8 51, 8 42, 30 42, 30 51, 8 51))\""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/run_metadata_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the Metadata Generator Mini App (Dublin Core) — run_metadata_app","title":"Run the Metadata Generator Mini App (Dublin Core) — run_metadata_app","text":"function launches miniUI Shiny app allows user fill metadata according Dublin Core standards download XML file.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/run_metadata_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the Metadata Generator Mini App (Dublin Core) — run_metadata_app","text":"","code":"run_metadata_app()"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/run_metadata_app.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run the Metadata Generator Mini App (Dublin Core) — run_metadata_app","text":"Launches miniUI Shiny app.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/snap_points_on_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Interactive Point Snapping on Map — snap_points_on_map","title":"Interactive Point Snapping on Map — snap_points_on_map","text":"function allows users interactively snap points map clicking dragging markers. returns data frame old new coordinates, indicates whether coordinates updated.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/snap_points_on_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interactive Point Snapping on Map — snap_points_on_map","text":"","code":"snap_points_on_map(coords_df)"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/snap_points_on_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interactive Point Snapping on Map — snap_points_on_map","text":"coords_df data frame containing columns lat lng latitude longitude.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/snap_points_on_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interactive Point Snapping on Map — snap_points_on_map","text":"data frame old new coordinates update status.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/snap_points_on_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interactive Point Snapping on Map — snap_points_on_map","text":"","code":"if (FALSE) { # \\dontrun{ coords <- data.frame( id = 1:2, lat = c(48.2082, 44.8176),   # Vienna, Belgrade lng = c(16.3738, 20.4633))    # Vienna, Belgrade updated_coords <- snap_points_on_map(coords) } # }"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/spatial_join_gadm.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a Spatial Join of Points with GADM Administrative Boundaries — spatial_join_gadm","title":"Perform a Spatial Join of Points with GADM Administrative Boundaries — spatial_join_gadm","text":"function downloads GADM administrative boundary data specified countries performs spatial join add administrative information dataset containing geographic coordinates. Optionally, sf object can provided instead downloading data.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/spatial_join_gadm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a Spatial Join of Points with GADM Administrative Boundaries — spatial_join_gadm","text":"","code":"spatial_join_gadm(   country_codes = c(\"AUT\", \"BIH\", \"BGR\", \"CHE\", \"CZE\", \"DEU\", \"HUN\", \"HRV\", \"MDA\", \"MNE\",     \"POL\", \"ROU\", \"SRB\", \"SVK\", \"SVN\", \"UKR\"),   coords_df,   lat_col = \"decimalLatitude\",   lon_col = \"decimalLongitude\",   sf_gadm = NULL,   timeout = 600 )"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/spatial_join_gadm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a Spatial Join of Points with GADM Administrative Boundaries — spatial_join_gadm","text":"country_codes character vector ISO3 country codes GADM data downloaded. Defaults countries Danube River Basin. coords_df data frame containing coordinates spatially join GADM administrative data. must include columns latitude longitude. lat_col name column coords_df containing latitude values. Defaults \"decimalLatitude\". lon_col name column coords_df containing longitude values. Defaults \"decimalLongitude\". sf_gadm Optional sf object containing GADM administrative boundaries. provided, used directly spatial join. Defaults NULL. timeout Timeout seconds downloads. Defaults 600 (10 minutes).","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/spatial_join_gadm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a Spatial Join of Points with GADM Administrative Boundaries — spatial_join_gadm","text":"data frame columns input coords_df, along administrative attributes GADM data.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/species_checklist.html","id":null,"dir":"Reference","previous_headings":"","what":"Species list based on a preliminary fish species check list of the Danube River Basin produced by the Join Danube Survey 5 (JDS5) — species_checklist","title":"Species list based on a preliminary fish species check list of the Danube River Basin produced by the Join Danube Survey 5 (JDS5) — species_checklist","text":"character vector species names","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/species_checklist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Species list based on a preliminary fish species check list of the Danube River Basin produced by the Join Danube Survey 5 (JDS5) — species_checklist","text":"","code":"species_checklist"},{"path":[]},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/species_checklist.html","id":"species-checklist","dir":"Reference","previous_headings":"","what":"species_checklist","title":"Species list based on a preliminary fish species check list of the Danube River Basin produced by the Join Danube Survey 5 (JDS5) — species_checklist","text":"character vector species names. Length = 143","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/species_checklist.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Species list based on a preliminary fish species check list of the Danube River Basin produced by the Join Danube Survey 5 (JDS5) — species_checklist","text":"JDS5","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/split_and_save_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a data frame based on the values of a column and save each subset as a CSV file — split_and_save_csv","title":"Split a data frame based on the values of a column and save each subset as a CSV file — split_and_save_csv","text":"function splits data frame unique values specified column saves subset CSV file. CSV files named based unique values specified column.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/split_and_save_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a data frame based on the values of a column and save each subset as a CSV file — split_and_save_csv","text":"","code":"split_and_save_csv(df, split_col, output_dir = \".\", sep = \",\")"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/split_and_save_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a data frame based on the values of a column and save each subset as a CSV file — split_and_save_csv","text":"df data frame split. split_col name column split data frame (string). output_dir directory CSV files saved. Default current working directory. sep separator used CSV files. Default comma (,).","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/split_and_save_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split a data frame based on the values of a column and save each subset as a CSV file — split_and_save_csv","text":"return value. CSV files saved disk.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/split_and_save_csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split a data frame based on the values of a column and save each subset as a CSV file — split_and_save_csv","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming df has a column named \"datasetName\" split_and_save_csv(df, split_col = \"datasetName\", output_dir = \"output/\") } # }"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/update_name_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Species Data in a Shiny MiniUI App — update_name_app","title":"Update Species Data in a Shiny MiniUI App — update_name_app","text":"function launches Shiny gadget within RStudio allows users manually update species data specified data frame. rows old species name differs new species name (new species name NA) shown selection modification. Selecting species dropdown filters table show selected row updating. completed, entire original data frame returned updated values specified column additional flag column.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/update_name_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Species Data in a Shiny MiniUI App — update_name_app","text":"","code":"update_name_app(data, old_names_col, new_names_col)"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/update_name_app.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Species Data in a Shiny MiniUI App — update_name_app","text":"data data frame containing species names potentially data. old_names_col column name data frame corresponding old species names. new_names_col column name data frame corresponding new species names updated.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/update_name_app.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update Species Data in a Shiny MiniUI App — update_name_app","text":"Returns original data frame updated values new names column flag indicating whether row manually updated.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/update_name_app.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update Species Data in a Shiny MiniUI App — update_name_app","text":"","code":"if (FALSE) { # \\dontrun{ df <- data.frame(old_species = c(\"Chondostroma nasus\", \"Hucho ucho\", \"Anguila anguilla\"),                  new_species = c(NA, \"Hucho ucho\", NA), other_data = c(1, 2, 3)) updated_data <- update_name_app(df, \"old_species\", \"new_species\") } # }"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/visualize_biodiversity_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize Biodiversity Data — visualize_biodiversity_data","title":"Visualize Biodiversity Data — visualize_biodiversity_data","text":"function provides multiple visualizations biodiversity occurrence data, including occurrence maps, species richness region, temporal trends, species composition, . user can specify type analysis type plot visualization (e.g., points vs. heatmap, bar vs. map).","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/visualize_biodiversity_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Biodiversity Data — visualize_biodiversity_data","text":"","code":"visualize_biodiversity_data(data, analysis_type, plot_type, ...)"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/visualize_biodiversity_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Biodiversity Data — visualize_biodiversity_data","text":"data data frame containing biodiversity occurrence data. analysis_type type analysis perform. Options include: \"map_occurrences\" - Map occurrences points heatmap. \"species_richness\" - Species richness region bar chart map. \"temporal_trends\" - Temporal trends species occurrences line area chart. \"species_composition\" - Species composition family/genus bar pie chart. \"sampling_effort\" - Sampling effort location histogram heatmap. \"species_abundance\" - Species abundance across sites boxplot violin plot. \"environment_vs_occurrence\" - Scatterplot smoothed relationship environmental variables species occurrence. \"coverage_plot\" - Data completeness coverage region time tile line plot. \"sampling_method_breakdown\" - Breakdown sampling methods bar pie chart. \"rank_abundance\" - Rank-abundance plot abundance histogram. plot_type type plot generate chosen analysis. Options depend analysis_type: \"map_occurrences\" - Options: \"points\", \"heatmap\". \"species_richness\" - Options: \"bar\", \"map\". \"temporal_trends\" - Options: \"line\", \"area\". \"species_composition\" - Options: \"bar\", \"pie\". \"sampling_effort\" - Options: \"histogram\", \"heatmap\". \"species_abundance\" - Options: \"boxplot\", \"violin\". \"environment_vs_occurrence\" - Options: \"scatter\", \"smooth\". \"coverage_plot\" - Options: \"tile\", \"line\". \"sampling_method_breakdown\" - Options: \"bar\", \"pie\". \"rank_abundance\" - Options: \"rank\", \"histogram\". additional arguments depending specific analysis type. include column names latitude, longitude, species, region, date, etc.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/visualize_biodiversity_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize Biodiversity Data — visualize_biodiversity_data","text":"ggplot2 object representing requested visualization.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/visualize_biodiversity_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize Biodiversity Data — visualize_biodiversity_data","text":"","code":"if (FALSE) { # \\dontrun{ # Example: Map occurrences as points visualize_biodiversity_data(data, analysis_type = \"map_occurrences\", plot_type = \"points\")  # Example: Species richness as a bar chart visualize_biodiversity_data(data, analysis_type = \"species_richness\", plot_type = \"bar\") } # }"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/visualize_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize Points on a Map with Optional Layers and Metadata — visualize_points","title":"Visualize Points on a Map with Optional Layers and Metadata — visualize_points","text":"function takes data frame containing latitude longitude coordinates (default columns: 'decimalLatitude' 'decimalLongitude') optionally additional columns (e.g., species, locality, year, dataset name). visualizes points map using leaflet package, popup show coordinates along provided information user chooses display . Additionally, allows loading vector raster layer map, points displayed top layer.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/visualize_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Points on a Map with Optional Layers and Metadata — visualize_points","text":"","code":"visualize_points(   points_df,   latitude_col = \"decimalLatitude\",   longitude_col = \"decimalLongitude\",   show_extra_columns = FALSE,   layer = NULL )"},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/visualize_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Points on a Map with Optional Layers and Metadata — visualize_points","text":"points_df data frame containing columns named 'decimalLatitude' 'decimalLongitude'. Optionally, data frame can include columns species, locality, year, dataset name, additional metadata. latitude_col name latitude column points_df. Default 'decimalLatitude'. longitude_col name longitude column points_df. Default 'decimalLongitude'. show_extra_columns logical value indicating whether display extra columns (e.g., species, locality, year) popup. Default FALSE. layer optional vector raster layer (e.g., sf object raster object) added map. points plotted top layer.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/visualize_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize Points on a Map with Optional Layers and Metadata — visualize_points","text":"leaflet map object points plotted , optionally, additional vector raster layer. popup display coordinates , show_extra_columns TRUE, additional columns provided.","code":""},{"path":"https://ytorres-cambas.github.io/danubeoccurR/reference/visualize_points.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize Points on a Map with Optional Layers and Metadata — visualize_points","text":"","code":"# Example: Visualize locations along the Danube River with fish species data fish_data_2 <- fish_data %>% select(species, decimalLatitude, decimalLongitude) #> Error in fish_data %>% select(species, decimalLatitude, decimalLongitude): could not find function \"%>%\" visualize_points(fish_data_2, show_extra_columns = TRUE) #> Error: object 'fish_data_2' not found  # Example with additional vector layer visualize_points(fish_data_2, layer = danube_basin, show_extra_columns = TRUE) #> Error: object 'fish_data_2' not found"}]
