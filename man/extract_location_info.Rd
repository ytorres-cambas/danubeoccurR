% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/extract_location_info.R
\name{extract_location_info}
\alias{extract_location_info}
\title{Extract Municipality, Province, and Country using Latitude and Longitude}
\usage{
extract_location_info(latitude, longitude, service = "osm", api_key = NULL)
}
\arguments{
\item{latitude}{Numeric, latitude of the point.}

\item{longitude}{Numeric, longitude of the point.}

\item{service}{Character, geocoding service to use. Options are "osm" (OpenStreetMap) or "google". Default is "osm".}

\item{api_key}{Character, the Google Maps API key (required if using Google Maps).}
}
\value{
A list with municipality, province, and country.
}
\description{
This function takes latitude and longitude values and returns the
corresponding municipality, province, and country (Darwin Core standard) using reverse geocoding.
Supports both OpenStreetMap (OSM) and Google Maps API.
}
\examples{
\dontrun{
# Example usage with OpenStreetMap:
# Point in Vienna, Austria (Danube River)
result_vienna <- extract_location_info(48.2082, 16.3738, service = "osm")
print(result_vienna)

# Point in Belgrade, Serbia (Danube River)
result_belgrade <- extract_location_info(44.7866, 20.4489, service = "osm")
print(result_belgrade)

# Example usage with Google Maps API (replace "your_api_key_here" with your actual API key):
result_vienna_google <- extract_location_info(48.2082, 16.3738, service = "google", api_key = "your_api_key_here")
print(result_vienna_google)

result_belgrade_google <- extract_location_info(44.7866, 20.4489, service = "google", api_key = "your_api_key_here")
print(result_belgrade_google)
}
}
