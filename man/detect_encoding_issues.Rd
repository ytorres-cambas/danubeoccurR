% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/detect_encoding_issues.R
\name{detect_encoding_issues}
\alias{detect_encoding_issues}
\title{Detect Encoding Issues in Names Using Language, Country, and Unicode Block Detection}
\usage{
detect_encoding_issues(
  data,
  name_col,
  countries = NULL,
  languages = NULL,
  custom_charset = NULL,
  case_sensitive = TRUE,
  ignore_whitespace = TRUE,
  report_type = "detailed",
  custom_regex = NULL,
  check_unicode_blocks = FALSE
)
}
\arguments{
\item{data}{A data frame containing the names or text data to be checked.}

\item{name_col}{The column name (as a string) in the data frame that contains the names or text data.}

\item{countries}{Optional. A vector of countries of origin for the names, used to infer the expected languages.}

\item{languages}{Optional. A vector of languages to be checked. If neither countries nor languages is provided, the function attempts to guess the languages automatically.}

\item{custom_charset}{Optional. A custom set of valid characters. If provided, names will be checked against this character set instead of the language or Unicode block.}

\item{case_sensitive}{Logical. Should the character matching be case sensitive? Defaults to TRUE.}

\item{ignore_whitespace}{Logical. Should leading and trailing whitespace be ignored when checking for issues? Defaults to TRUE.}

\item{report_type}{A string specifying the type of report to return. Choices are \code{"detailed"} (default), \code{"summary"}, and \code{"flagged"}.}

\item{custom_regex}{Optional. A custom regular expression for detecting encoding issues. Overrides language and Unicode block checks if provided.}

\item{check_unicode_blocks}{Logical. If TRUE, checks whether characters in the names belong to the expected Unicode block based on the language. Defaults to FALSE.}
}
\value{
A data frame. Depending on the \code{report_type}:
\itemize{
\item \code{"detailed"}: Returns the original data frame with additional columns indicating encoding issues.
\item \code{"summary"}: Returns a summary of the total number of rows and the number of detected issues.
\item \code{"flagged"}: Returns only the rows where encoding issues were detected.
}
}
\description{
This function detects potential encoding issues in text data, such as names of people or places,
by comparing characters against expected valid characters for a specific language or languages,
country, or Unicode block. It allows for custom character sets, supports automatic language guessing,
and provides detailed reporting.
}
\details{
The function can handle multiple languages per country and allows for custom character sets. It uses the \code{cld2} or \code{cld3} package for language detection, which provides fine-grained control over the expected character set.
It can automatically guess the languages of the names if neither countries nor languages are specified.

If \code{check_unicode_blocks} is TRUE, the function detects characters outside the expected Unicode block (e.g., Latin, Cyrillic) for the specified languages. If a \code{custom_regex} is provided, the regex pattern will be used to detect encoding issues, overriding the language or Unicode block check.
}
\examples{
df <- data.frame(
  names = c("Müller", "François", "Elína", "János", "Dvořák", "Băsescu", "Petrović", "Šimon", "Dragović")
)

# Detect encoding issues for German and Hungarian names
detect_encoding_issues(df, name_col = "names", languages = c("de", "hu"))

# Detect issues using a custom character set (only basic ASCII characters)
detect_encoding_issues(df, name_col = "names", custom_charset = "a-zA-Z")

# Guess the languages and check Unicode blocks
detect_encoding_issues(df, name_col = "names", check_unicode_blocks = TRUE)

}
